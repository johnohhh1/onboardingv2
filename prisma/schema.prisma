generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id          String   @id @default(cuid())
  name        String
  code        String   @unique
  location    String
  address     String?
  phone       String?
  email       String?
  timezone    String   @default("America/Detroit")
  
  // Restaurant Settings
  settings    Json     @default("{}")
  branding    Json     @default("{}")
  
  // Status and metadata
  status      RestaurantStatus @default(ACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  users       User[]
  teamMembers TeamMember[]
  checklistTemplates ChecklistTemplate[]
  
  @@map("restaurants")
}

enum RestaurantStatus {
  ACTIVE
  INACTIVE
  NEEDS_ATTENTION
  SETUP_PENDING
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String
  role        UserRole
  
  // Restaurant association
  restaurantId String?
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  
  // Authentication
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  
  // Metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastLoginAt DateTime?
  
  // Activity tracking
  teamMemberAssignments TeamMember[]
  
  @@map("users")
}

enum UserRole {
  AREA_MANAGER
  RESTAURANT_MANAGER
  TRAINER
  ADMIN
}

model TeamMember {
  id          String   @id @default(cuid())
  name        String
  email       String?
  phone       String
  position    String
  
  // Start information
  startDate   DateTime
  startTime   String
  
  // Restaurant association
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  
  // Manager/Trainer assignment
  assignedToId String?
  assignedTo   User? @relation(fields: [assignedToId], references: [id])
  
  // Employee details
  employeeId  String?
  department  String?
  
  // Status tracking
  status      TeamMemberStatus @default(NOT_STARTED)
  completionDate DateTime?
  
  // Metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  checklistProgress ChecklistProgress[]
  notes             TeamMemberNote[]
  
  @@map("team_members")
}

enum TeamMemberStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  TERMINATED
}

model ChecklistTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  
  // Restaurant association
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  
  // Template settings
  isDefault   Boolean  @default(false)
  isActive    Boolean  @default(true)
  
  // Metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  tasks       ChecklistTask[]
  
  @@map("checklist_templates")
}

model ChecklistTask {
  id          String   @id @default(cuid())
  title       String
  description String?
  step        Int
  category    String
  order       Int
  
  // Task settings
  isRequired  Boolean  @default(true)
  estimatedMinutes Int?
  
  // Template association
  templateId  String
  template    ChecklistTemplate @relation(fields: [templateId], references: [id])
  
  // Metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  progress    ChecklistProgress[]
  
  @@map("checklist_tasks")
}

model ChecklistProgress {
  id          String   @id @default(cuid())
  
  // Associations
  teamMemberId String
  teamMember   TeamMember @relation(fields: [teamMemberId], references: [id])
  
  taskId      String
  task        ChecklistTask @relation(fields: [taskId], references: [id])
  
  // Progress data
  completed   Boolean  @default(false)
  completedAt DateTime?
  completedBy String?
  
  // Notes and details
  notes       String?
  
  // Metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([teamMemberId, taskId])
  @@map("checklist_progress")
}

model TeamMemberNote {
  id          String   @id @default(cuid())
  content     String
  type        NoteType @default(GENERAL)
  
  // Associations
  teamMemberId String
  teamMember   TeamMember @relation(fields: [teamMemberId], references: [id])
  
  authorId    String
  
  // Metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("team_member_notes")
}

enum NoteType {
  GENERAL
  ISSUE
  SUCCESS
  REMINDER
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}